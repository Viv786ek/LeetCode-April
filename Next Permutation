Explanation:->

Find the point a[i]<a[i+1] by iterating from last. This is our index1.
If there is no breakpoint that means the array is in descending order. So, simply reverse the full array.
Else again iterate from last and find the element that is great than a[index1]. Store it as index2.
Swap the 2elements at index1 and index2.
Finally reverse the array from index1+1, so that we get the minimum number. Which means the next permutation.
Time complexity: O(n).

class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int i, j;
        int n= nums.size();
        int a=0;
        for(i=n-2; i>=0; i--){
            if(nums[i]<nums[i+1]){
                break;
            }
        }
        if(i<0)
            reverse(nums.begin(), nums.end());
        else{
            for(j=n-1; j>=0; j--){
                if(nums[i]<nums[j]){
                    break;
                }
            }
            swap(nums[i], nums[j]);
            reverse(nums.begin()+i+1, nums.end());
        }
    }
};

